/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UseRequestRouteImport } from './routes/useRequest'
import { Route as RaceConditionRouteImport } from './routes/raceCondition'
import { Route as DiscardPreviousRequestRouteImport } from './routes/discardPreviousRequest'

const UseRequestRoute = UseRequestRouteImport.update({
  id: '/useRequest',
  path: '/useRequest',
  getParentRoute: () => rootRouteImport,
} as any)
const RaceConditionRoute = RaceConditionRouteImport.update({
  id: '/raceCondition',
  path: '/raceCondition',
  getParentRoute: () => rootRouteImport,
} as any)
const DiscardPreviousRequestRoute = DiscardPreviousRequestRouteImport.update({
  id: '/discardPreviousRequest',
  path: '/discardPreviousRequest',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/discardPreviousRequest': typeof DiscardPreviousRequestRoute
  '/raceCondition': typeof RaceConditionRoute
  '/useRequest': typeof UseRequestRoute
}
export interface FileRoutesByTo {
  '/discardPreviousRequest': typeof DiscardPreviousRequestRoute
  '/raceCondition': typeof RaceConditionRoute
  '/useRequest': typeof UseRequestRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/discardPreviousRequest': typeof DiscardPreviousRequestRoute
  '/raceCondition': typeof RaceConditionRoute
  '/useRequest': typeof UseRequestRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/discardPreviousRequest' | '/raceCondition' | '/useRequest'
  fileRoutesByTo: FileRoutesByTo
  to: '/discardPreviousRequest' | '/raceCondition' | '/useRequest'
  id: '__root__' | '/discardPreviousRequest' | '/raceCondition' | '/useRequest'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DiscardPreviousRequestRoute: typeof DiscardPreviousRequestRoute
  RaceConditionRoute: typeof RaceConditionRoute
  UseRequestRoute: typeof UseRequestRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/useRequest': {
      id: '/useRequest'
      path: '/useRequest'
      fullPath: '/useRequest'
      preLoaderRoute: typeof UseRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/raceCondition': {
      id: '/raceCondition'
      path: '/raceCondition'
      fullPath: '/raceCondition'
      preLoaderRoute: typeof RaceConditionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/discardPreviousRequest': {
      id: '/discardPreviousRequest'
      path: '/discardPreviousRequest'
      fullPath: '/discardPreviousRequest'
      preLoaderRoute: typeof DiscardPreviousRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  DiscardPreviousRequestRoute: DiscardPreviousRequestRoute,
  RaceConditionRoute: RaceConditionRoute,
  UseRequestRoute: UseRequestRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
